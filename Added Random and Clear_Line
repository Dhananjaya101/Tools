"""
This module contains many usefull
functions that you can use in your
program.

Here is the list of the included functions:

Finding_Mouse_Pos() >>> Returns the mouse pos
Finding_Turtle_Pos() >>> Returns the turtle pos
Text_To_Speech(say, voice) >>> Says something using computer audio
Prime_Number_Cal(number_to_cal) >>> Returns a prime number you can call
Fib(number) >>> Returns a list with numbers using the fibonacci sequence
Break() >>> Breaks a piece of code, allowing you to debug
Find(substring, fullstring) >>> Finds if a substring is inside a fullstring
Print_Lines(lines) >>> Prints a number of blank lines
Clear_Line() >>> Clears printed line in terminal
Random(start, end, amount) >>> Gives a certian amount of random numbers between certain numbers

"""

import pyautogui
import turtle
import pyttsx3
import random
import math
from datetime import datetime


class Tools:
    def Finding_Mouse_Pos():
        """
        This function will return a tuple
        which contains the mouseX and mouseY
        """
        return(pyautogui.position())

    def Finding_Turtle_Pos():
        """
        This function will return a tuple
        which contains the turtleX and turtleY
        """
        return(turtle.position())

    def Text_To_Speech(self, say: str, voice: str):
        """
        This function helps you in Text-To-Speech,
        give it something to say and a gender
        """
        engine = pyttsx3.init()

        voices = engine.getProperty('voices')
        if voice == 'male':
            engine.setProperty('voice', voices[0].id)
        else:
            engine.setProperty('voice', voices[1].id)

        engine.say(say)
        engine.runAndWait()

    def Prime_Number_Cal(self, number_to_cal: int):
        """
        This function will return a certain prime
        number.

        Ex: print(Prime_Number_Cal(1000))

        Output: 7919
        """
        is_prime = True
        number = 5
        prime_list = [2, 3]
        prime_count = 2

        while prime_count < number_to_cal:
            is_prime = True
            for prime in prime_list:
                if number % prime == 0:
                    is_prime = False

            if is_prime is True:
                prime_list.append(number)
                prime_count = prime_count + 1

            number = number + 1
        return(prime_list[-1])

    def Fib(self, number: int):
        """
        This function allowes you to use
        the fibonacci sequence in your code.

        Give a paremeter and it will return
        a list of numbers.
        """
        return_set = []
        a, b = 0, 1
        while a < number:
            return_set.append(a)
            a, b = b, a + b
        return(return_set)

    def Break(self):
        """
        You can use this function anywhere
        you want to pause a piece of code.
        """
        input('Press Enter to Continue ')

    def Find(self, substring, fullstring):
        """
        This function returns 'True' if
        the substring is in fullstring
        and 'False' if not.
        """
        if substring in fullstring:
            return(True)
        else:
            return(False)

    def Print_Lines(self, lines):
        """
        This functions allowed you to
        print a certain amount of blank
        lines.
        """
        for _ in range(lines):
            print()

    def Clear_Line(self):
        """
        This function clears a printed
        line in the terminal
        """
        print('\033[A                             \033[A')

    def Random(self, start, end, amount):
        """
        I have noticed that the random
        number generator for Python
        often reapeats numbers, so here
        is a more effecient random
        number generator.

        Returns a list containing
        random numbers, works best
        with "end" parameter, set max
        to 100.
        """
        random.seed(datetime.now())
        random_list = []
        for i in range(amount):
            random_list.append(((math.floor(random.random() * 100)) % end))
        return(random_list)
